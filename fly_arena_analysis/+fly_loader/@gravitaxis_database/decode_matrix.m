 function decoded = decode_matrix(obj, data, data_type)
 %DECODE_MATRIX Convert a string to a 2-D matrix.
%   DECODE_MATRIX(S, T), where S and T are strings, returns the matrix that
%   was encoded in the string by encode_matrix.  T specifies the type of
%   data in the matrix and must be one of 'double', 'single', 'half',
%   'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64' and
%   'uint64'.

    if ~ischar(data)
        error('The data passed to decode_matrix must be a string generated by encode_matrix.');
    elseif ~strcmp(data(end), char(13))
        error('The data passed to decode_matrix must be terminated by a newline.');
    else
        if any(strcmp(data_type, {'double', 'single'}))
            str_format = '%e';
        elseif strcmp(data_type, 'half')
            % MATLAB doesn't have a half precision type so use single
            % instead.
            str_format = '%e';
            data_type = 'single';
        elseif any(strcmp(data_type, {'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64'}))
            str_format = '%d';
        else
            error(['Cannot decode matrices with type ''' data_type '''']);
        end
        
        decoded = sscanf(data, str_format);
        rows = length(strfind(data, char(13)));
        cols = length(decoded) / rows;
        if fix(cols) ~= cols
            error('The data does not represent a full matrix.');
        end
        decoded = reshape(decoded, cols, rows)';
        if ~strcmp(data_type, 'double')
            eval(strcat('decoded = ', data_type, '(decoded);'))
        end
    end
end

